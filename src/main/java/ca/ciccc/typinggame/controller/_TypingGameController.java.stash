package ca.ciccc.typinggame.controller;

import ca.ciccc.typinggame.model.Word;
import ca.ciccc.typinggame.model.WordGenerator;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.LinkedList;
import java.util.ResourceBundle;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.util.Duration;

// publicclass TypingGameController implements Initializable {
public class TypingGameController implements Initializable {
  private static final int INITIAL_WORD_LENGTH = 2;
  private static final int DEFAULT_TIME = 60;
  private static final int TIMER_DURATION = 1;

  @FXML private TextFlow timeFrame;
  @FXML private TextFlow scoreFrame;
  @FXML private TextFlow wordFrame1;
  @FXML private TextFlow wordFrame2;
  @FXML private TextFlow wordFrame3;
  @FXML private TextFlow inputFrame;
  private TextFlow[] wordFrames;

  //  private Player player;
  //  private Player[] players;
  // private int timeRemains
  private WordGenerator wordGenerator;
  private int wordLength;
  private int wordCount;
  private IntegerProperty timeRemains;
  private IntegerProperty score;
  private StringProperty[] words = new StringProperty[3];
  private LinkedList<Word> targetWords;
  private String currentInput;
  private boolean isFinished;

  @Override
  public void initialize(URL location, ResourceBundle resources) {
    try {
      wordGenerator = new WordGenerator(getClass().getResource("../../../../wordlist.txt").toURI());
    } catch (URISyntaxException e) {
      e.printStackTrace();
    }
    wordLength = INITIAL_WORD_LENGTH;
    wordCount = 0;
    isFinished = false;
    timeRemains = new SimpleIntegerProperty(DEFAULT_TIME);
    score = new SimpleIntegerProperty(0);
    Timeline timer =
        new Timeline(
            new KeyFrame(
                Duration.millis(TIMER_DURATION * 1000),
                new EventHandler<ActionEvent>() {
                  @Override
                  public void handle(ActionEvent event) {
                    updateTimeRemains(TIMER_DURATION);
                  }
                }));
    timer.setCycleCount(DEFAULT_TIME);
    timer.play();

    Text timeText = new Text();
    timeText.textProperty().bind(timeRemains.asString());
    timeFrame.getChildren().add(timeText);

    Text scoreText = new Text();
    scoreText.textProperty().bind(score.asString());
    scoreFrame.getChildren().add(scoreText);

    targetWords = new LinkedList<>();
    for (int i = 0; i < 3; i++) {
      targetWords.add(getNextWord());
    }

    wordFrames = new TextFlow[]{wordFrame1, wordFrame2, wordFrame3};

    for (int i = 0; i < 3; i++) {
      Text wordText = new Text();
      words[i] = new SimpleStringProperty(targetWords.get(i).getStr());
      wordText.textProperty().bind(words[i]);
      wordFrames[i].getChildren().add(wordText);
    }

    Text inputText = new Text("oiwrfgpwefiunmwoeifmweio@fngiuwenf@woenmfiow@emfwmefw@mefi@");
    inputFrame.getChildren().add(inputText);
  }

  public void pressNewGame() {
    // TODO: initialize the game and call setGameScene()
  }

  public void pressMainMenu() {
    // TODO: initialize the game and call setStartScene()
  }

  public Scene getScene() {
    // TODO: get the Scene
    return null;
  }

  public void updateTimeRemains(int duration) {
    timeRemains.set(timeRemains.get() - duration);
    if (timeRemains.get() < 0) {
      timeRemains.set(0);
      isFinished = true;
      // TODO: show result
    }
  }

  public void setupEventListener(Scene scene) {
    scene.setOnKeyPressed(this::keyPressed);
  }

  private void keyPressed(KeyEvent e) {
    // System.err.println("=== DEBUG START ======================================");
    // System.err.println(e);
    // System.err.println("=== DEBUG END ========================================");
    targetWords.add(getNextWord());
    targetWords.poll();
    // System.out.print("[");
    // for (Word w : targetWords) {
    //   System.out.print(w.getStr() + ", ");
    // }
    // System.out.println("]");

    for (int i = 0; i < 3; i++) {
      words[i].set(targetWords.get(i).getStr());
    }

    switch (e.getCode()) {
      case ENTER:
        System.out.println("Enter¤òÑºÏÂ¤·¤Þ¤·¤¿¡£");
        break;
      case SPACE:
        System.out.println("¥¹¥Ú©`¥¹¤òÑºÏÂ¤·¤Þ¤·¤¿¡£");
        break;
      default:
        break;
    }
  }

  private Word getNextWord() {
    if (wordCount >= wordLength) {
      wordLength++;
      wordCount = 0;
    }
    wordCount++;
    return wordGenerator.generateWord(wordLength, wordCount);
  }

  public void hitKey() {
    // TODO: check the input value
  }

  public void setResult() {
    // TODO: set the result page
  }
}
